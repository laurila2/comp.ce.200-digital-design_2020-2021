<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 13:51:48 on 12/09/20 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c2_t6_alien_hitblock.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - viuhom.viuhom (linux-desktop2.tuni.fi)</span>
<span class=C>--          at - 12:07:09 11&#47;24&#47;20</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c2_t6_alien_hitblock <span class=K>IS</span>
   <span class=K>PORT</span>(
      clk            : <span class=A>IN</span>     <span class=T>std_logic</span>;
      hit            : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst            : <span class=A>IN</span>     <span class=T>std_logic</span>;
      alien_defeated : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      color          : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c2_t6_alien_hitblock ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c2_t6_alien_hitblock.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - viuhom.viuhom (linux-desktop2.tuni.fi)</span>
<span class=C>--          at - 12:07:09 11&#47;24&#47;20</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c2_t6_alien_hitblock <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> din0   : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din2   : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din3   : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din4   : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din5   : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> din6   : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout   : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout0  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout1  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout2  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout3  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout4  : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout5  : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> q      : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> result : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);

   <span class=C>-- Implicit buffer signal declarations</span>
   <span class=K>SIGNAL</span> alien_defeated_internal : <span class=T>std_logic</span>;


   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_0' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_0reg_cval : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_12' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_12reg_cval : <span class=T>std_logic</span>;

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_11' of 'split'</span>
   <span class=K>SIGNAL</span> mw_U_11temp_din : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);

   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> c1_t2_incrementer
   <span class=K>PORT</span> (
      value  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0);
      result : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : c1_t2_incrementer <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c1_t2_incrementer;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_0' of 'adff'</span>
   q <= mw_U_0reg_cval;
   u_0seq_proc: <span class=K>PROCESS</span> (clk, rst)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst = '0') <span class=K>THEN</span>
         mw_U_0reg_cval <= <span class=S>"000"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_0reg_cval <= dout;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_0seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_12' of 'adff'</span>
   alien_defeated_internal <= mw_U_12reg_cval;
   u_12seq_proc: <span class=K>PROCESS</span> (clk, rst)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst = '0') <span class=K>THEN</span>
         mw_U_12reg_cval <= '0';
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_12reg_cval <= dout4;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_12seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_10' of 'and'</span>
   dout3 <= dout0 <span class=K>AND</span> <span class=K>NOT</span>(dout1) <span class=K>AND</span> dout2;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_2' of 'constval'</span>
   din0 <= <span class=S>"101010011000101011000111"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_4' of 'constval'</span>
   din2 <= <span class=S>"000101010111000111000111"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_5' of 'constval'</span>
   din3 <= <span class=S>"011010111110011100000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_7' of 'constval'</span>
   din4 <= <span class=S>"011100101110011100000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_8' of 'constval'</span>
   din5 <= <span class=S>"000001110000000000000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_9' of 'constval'</span>
   din6 <= <span class=S>"000000000000000000000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_1' of 'mux'</span>
   u_1combo_proc: <span class=K>PROCESS</span>(din0, din2, din3, din4, din5, din6, q)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> q <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"000"</span> => dout5 <= din0;
      <span class=K>WHEN</span> <span class=S>"001"</span> => dout5 <= din2;
      <span class=K>WHEN</span> <span class=S>"010"</span> => dout5 <= din3;
      <span class=K>WHEN</span> <span class=S>"011"</span> => dout5 <= din4;
      <span class=K>WHEN</span> <span class=S>"100"</span> => dout5 <= din5;
      <span class=K>WHEN</span> <span class=S>"101"</span> => dout5 <= din6;
      <span class=K>WHEN</span> <span class=S>"110"</span> => dout5 <= din6;
      <span class=K>WHEN</span> <span class=S>"111"</span> => dout5 <= din6;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout5 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_1combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_3' of 'mux'</span>
   u_3combo_proc: <span class=K>PROCESS</span>(q, result, hit)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> hit <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout <= q;
      <span class=K>WHEN</span> '1' => dout <= result;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_3combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_13' of 'mux'</span>
   u_13combo_proc: <span class=K>PROCESS</span>(dout3, alien_defeated_internal)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> alien_defeated_internal <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout4 <= dout3;
      <span class=K>WHEN</span> '1' => dout4 <= alien_defeated_internal;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout4 <= 'X';
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_13combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_14' of 'mux'</span>
   u_14combo_proc: <span class=K>PROCESS</span>(dout5, din6, alien_defeated_internal)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> alien_defeated_internal <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => color <= dout5;
      <span class=K>WHEN</span> '1' => color <= din6;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => color <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_14combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_11' of 'split'</span>
   mw_U_11temp_din <= q;
   u_11combo_proc: <span class=K>PROCESS</span> (mw_U_11temp_din)
   <span class=K>VARIABLE</span> temp_din: <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);
   <span class=K>BEGIN</span>
      temp_din := mw_U_11temp_din(2 <span class=K>DOWNTO</span> 0);
      dout0 <= temp_din(0);
      dout1 <= temp_din(1);
      dout2 <= temp_din(2);
   <span class=K>END</span> <span class=K>PROCESS</span> u_11combo_proc;

   <span class=C>-- Instance port mappings.</span>
   U_6 : c1_t2_incrementer
      <span class=K>PORT</span> <span class=K>MAP</span> (
         value  => q,
         result => result
      );

   <span class=C>-- Implicit buffered output assignments</span>
   alien_defeated <= alien_defeated_internal;

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
