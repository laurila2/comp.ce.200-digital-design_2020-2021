<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 13:52:07 on 12/09/20 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c5_t2_Write_Sequencer.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - viuhom.viuhom (linux-desktop5.tuni.fi)</span>
<span class=C>--          at - 15:22:38 11&#47;13&#47;20</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c5_t2_Write_Sequencer <span class=K>IS</span>
   <span class=K>PORT</span>(
      alien_defeated : <span class=A>IN</span>     <span class=T>std_logic</span>;
      clk            : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n          : <span class=A>IN</span>     <span class=T>std_logic</span>;
      write_ready    : <span class=A>IN</span>     <span class=T>std_logic</span>;
      enable         : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      frame_done     : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      gun_px_idx     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      module_select  : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      write          : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c5_t2_Write_Sequencer ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c5_t2_Write_Sequencer.fsm</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - viuhom.viuhom (linux-desktop2.tuni.fi)</span>
<span class=C>--          at - 12:11:45 11&#47;24&#47;20</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ARCHITECTURE</span> fsm <span class=K>OF</span> c5_t2_Write_Sequencer <span class=K>IS</span>

   <span class=K>TYPE</span> STATE_TYPE <span class=K>IS</span> (
      alienwrite1,
      alienwrite2,
      gunwrite1,
      gunwrite2,
      gunwrite3,
      gunwrite4,
      framedoneing,
      enabling,
      start,
      bulletwrite1,
      bulletwrite2,
      delay,
      aliendefeated,
      gunwrite5
   );

   <span class=C>-- Declare current and next state signals</span>
   <span class=K>SIGNAL</span> current_state : STATE_TYPE;
   <span class=K>SIGNAL</span> next_state : STATE_TYPE;
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>SIGNAL</span> hds_next,hds_current,hds_clock: <span class=T>INTEGER</span>;
   <span class=C>-- pragma synthesis_on</span>

   <span class=C>-- Declare Wait State internal signals</span>
   <span class=K>SIGNAL</span> csm_timer : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> csm_next_timer : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> csm_timeout : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> csm_to_delay : <span class=T>std_logic</span>;

   <span class=C>-- Declare any pre-registered internal signals</span>
   <span class=K>SIGNAL</span> enable_int : <span class=T>std_logic</span> ;
   <span class=K>SIGNAL</span> frame_done_int : <span class=T>std_logic</span> ;
   <span class=K>SIGNAL</span> gun_px_idx_int : <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> module_select_int : <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> write_int : <span class=T>std_logic</span> ;

<span class=K>BEGIN</span>

   <span class=C>-----------------------------------------------------------------</span>
   clocked_proc : <span class=K>PROCESS</span> (
      clk,
      rst_n
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         current_state <= start;
         csm_timer <= (<span class=K>OTHERS</span> => '0');
         <span class=C>-- Default Reset Values</span>
         enable <= '0';
         frame_done <= '0';
         gun_px_idx <= <span class=S>"00"</span>;
         module_select <= <span class=S>"00"</span>;
         write <= '0';
         <span class=C>-- pragma synthesis_off</span>
         hds_current <= 0;
         <span class=C>-- pragma synthesis_on</span>
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk = '1') <span class=K>THEN</span>
         current_state <= next_state;
         csm_timer <= csm_next_timer;
         <span class=C>-- pragma synthesis_off</span>
         hds_current <= hds_next;
         hds_clock <= -1;
         hds_clock <= 0;
         <span class=C>-- pragma synthesis_on</span>
         <span class=C>-- Registered output assignments</span>
         enable <= enable_int;
         frame_done <= frame_done_int;
         gun_px_idx <= gun_px_idx_int;
         module_select <= module_select_int;
         write <= write_int;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> clocked_proc;

   <span class=C>-----------------------------------------------------------------</span>
   nextstate_proc : <span class=K>PROCESS</span> (
      alien_defeated,
      csm_timeout,
      current_state,
      write_ready
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=C>-- Default assignments to Wait State entry flags</span>
      csm_to_delay <= '0';
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> alienwrite1 =>
            next_state <= alienwrite2;
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 1;
            <span class=C>-- pragma synthesis_on</span>
         <span class=K>WHEN</span> alienwrite2 =>
            next_state <= bulletwrite1;
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 2;
            <span class=C>-- pragma synthesis_on</span>
         <span class=K>WHEN</span> gunwrite1 =>
            next_state <= gunwrite2;
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 3;
            <span class=C>-- pragma synthesis_on</span>
         <span class=K>WHEN</span> gunwrite2 =>
            next_state <= gunwrite3;
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 4;
            <span class=C>-- pragma synthesis_on</span>
         <span class=K>WHEN</span> gunwrite3 =>
            next_state <= gunwrite4;
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 5;
            <span class=C>-- pragma synthesis_on</span>
         <span class=K>WHEN</span> gunwrite4 =>
            next_state <= gunwrite5;
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 6;
            <span class=C>-- pragma synthesis_on</span>
         <span class=K>WHEN</span> framedoneing =>
            next_state <= enabling;
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 7;
            <span class=C>-- pragma synthesis_on</span>
         <span class=K>WHEN</span> enabling =>
            next_state <= delay;
            csm_to_delay <= '1';
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 8;
            <span class=C>-- pragma synthesis_on</span>
         <span class=K>WHEN</span> start =>
            <span class=K>IF</span> (write_ready = '0') <span class=K>THEN</span>
               next_state <= start;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 9;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSIF</span> (write_ready = '1' <span class=K>AND</span>
                   alien_defeated = '0') <span class=K>THEN</span>
               next_state <= alienwrite1;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 10;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSIF</span> (write_ready = '1' <span class=K>AND</span>
                   alien_defeated = '1') <span class=K>THEN</span>
               next_state <= aliendefeated;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 11;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSE</span>
               next_state <= start;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 0;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> bulletwrite1 =>
            next_state <= bulletwrite2;
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 12;
            <span class=C>-- pragma synthesis_on</span>
         <span class=K>WHEN</span> bulletwrite2 =>
            next_state <= gunwrite1;
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 13;
            <span class=C>-- pragma synthesis_on</span>
         <span class=K>WHEN</span> delay =>
            <span class=K>IF</span> (csm_timeout = '1') <span class=K>THEN</span>
               next_state <= start;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 14;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSE</span>
               next_state <= delay;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 0;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> aliendefeated =>
            next_state <= framedoneing;
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 15;
            <span class=C>-- pragma synthesis_on</span>
         <span class=K>WHEN</span> gunwrite5 =>
            next_state <= framedoneing;
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 16;
            <span class=C>-- pragma synthesis_on</span>
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            next_state <= start;
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 0;
            <span class=C>-- pragma synthesis_on</span>
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> nextstate_proc;

   <span class=C>-----------------------------------------------------------------</span>
   output_proc : <span class=K>PROCESS</span> (
      current_state
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=C>-- Default Assignment</span>
      enable_int <= '0';
      frame_done_int <= '0';
      gun_px_idx_int <= <span class=S>"00"</span>;
      module_select_int <= <span class=S>"00"</span>;
      write_int <= '0';

      <span class=C>-- Combined Actions</span>
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> alienwrite1 =>
            write_int <= '1';
         <span class=K>WHEN</span> alienwrite2 =>
            module_select_int <= <span class=S>"10"</span>;
         <span class=K>WHEN</span> gunwrite1 =>
            module_select_int <= <span class=S>"01"</span>;
            write_int <= '1';
         <span class=K>WHEN</span> gunwrite2 =>
            module_select_int <= <span class=S>"01"</span>;
            gun_px_idx_int <= <span class=S>"01"</span>;
            write_int <= '1';
         <span class=K>WHEN</span> gunwrite3 =>
            module_select_int <= <span class=S>"01"</span>;
            gun_px_idx_int <= <span class=S>"10"</span>;
            write_int <= '1';
         <span class=K>WHEN</span> gunwrite4 =>
            module_select_int <= <span class=S>"01"</span>;
            gun_px_idx_int <= <span class=S>"11"</span>;
            write_int <= '1';
         <span class=K>WHEN</span> framedoneing =>
            frame_done_int <= '1';
         <span class=K>WHEN</span> enabling =>
            enable_int <= '1';
         <span class=K>WHEN</span> bulletwrite1 =>
            module_select_int <= <span class=S>"10"</span>;
            write_int <='1';
         <span class=K>WHEN</span> bulletwrite2 =>
            module_select_int <= <span class=S>"01"</span>;
         <span class=K>WHEN</span> aliendefeated =>
            module_select_int <= <span class=S>"11"</span>;
            write_int <= '1';
         <span class=K>WHEN</span> gunwrite5 =>
            module_select_int <= <span class=S>"11"</span>;
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            <span class=K>NULL</span>;
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> output_proc;

   <span class=C>-----------------------------------------------------------------</span>
   csm_wait_combo_proc: <span class=K>PROCESS</span> (
      csm_timer,
      csm_to_delay
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>VARIABLE</span> csm_temp_timeout : <span class=T>std_logic</span>;
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (unsigned(csm_timer) = 0) <span class=K>THEN</span>
         csm_temp_timeout := '1';
      <span class=K>ELSE</span>
         csm_temp_timeout := '0';
      <span class=K>END</span> <span class=K>IF</span>;

      <span class=K>IF</span> (csm_to_delay = '1') <span class=K>THEN</span>
         csm_next_timer <= <span class=S>"100110001001011001111111"</span>; <span class=C>-- no cycles(10000000)-1=9999999</span>
      <span class=K>ELSE</span>
         <span class=K>IF</span> (csm_temp_timeout = '1') <span class=K>THEN</span>
            csm_next_timer <= (<span class=K>OTHERS</span>=>'0');
         <span class=K>ELSE</span>
            csm_next_timer <= unsigned(csm_timer) - '1';
         <span class=K>END</span> <span class=K>IF</span>;
      <span class=K>END</span> <span class=K>IF</span>;
      csm_timeout <= csm_temp_timeout;
   <span class=K>END</span> <span class=K>PROCESS</span> csm_wait_combo_proc;

<span class=K>END</span> fsm;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
