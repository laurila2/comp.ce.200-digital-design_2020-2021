<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 13:51:32 on 12/09/20 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.bonus_t3_shield_gamma_set.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - viuhom.viuhom (linux-desktop14.tuni.fi)</span>
<span class=C>--          at - 12:31:06 12&#47;01&#47;20</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> bonus_t3_shield_gamma_set <span class=K>IS</span>
   <span class=K>PORT</span>(
      clk      : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n    : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rx_rdy   : <span class=A>IN</span>     <span class=T>std_logic</span>;
      bit_out  : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      lat      : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      sb       : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      transmit : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> bonus_t3_shield_gamma_set ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.bonus_t3_shield_gamma_set.fsm</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - viuhom.viuhom (linux-desktop5.tuni.fi)</span>
<span class=C>--          at - 10:09:21 12&#47;04&#47;20</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ARCHITECTURE</span> fsm <span class=K>OF</span> bonus_t3_shield_gamma_set <span class=K>IS</span>

   <span class=C>-- Architecture Declarations</span>
   <span class=K>SIGNAL</span> a : <span class=T>integer</span> <span class=K>RANGE</span> 8 <span class=K>DOWNTO</span> 0 := 7;
   <span class=K>SIGNAL</span> gamma : <span class=T>std_logic_vector</span>(17 <span class=K>DOWNTO</span> 0) := <span class=S>"001110111111111011"</span>;
   <span class=K>SIGNAL</span> i : <span class=T>integer</span> <span class=K>RANGE</span> 23 <span class=K>DOWNTO</span> 0 := 17;

   <span class=K>TYPE</span> STATE_TYPE <span class=K>IS</span> (
      s0,
      s1,
      s2,
      s3,
      s4,
      s5
   );

   <span class=C>-- Declare current and next state signals</span>
   <span class=K>SIGNAL</span> current_state : STATE_TYPE;
   <span class=K>SIGNAL</span> next_state : STATE_TYPE;

<span class=K>BEGIN</span>

   <span class=C>-----------------------------------------------------------------</span>
   clocked_proc : <span class=K>PROCESS</span> (
      clk,
      rst_n
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         current_state <= s0;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk = '1') <span class=K>THEN</span>
         current_state <= next_state;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> clocked_proc;

   <span class=C>-----------------------------------------------------------------</span>
   nextstate_proc : <span class=K>PROCESS</span> (
      a,
      current_state,
      i,
      rx_rdy
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> s0 =>
            <span class=K>IF</span> (rx_rdy = '1') <span class=K>THEN</span>
               next_state <= s1;
            <span class=K>ELSE</span>
               next_state <= s0;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> s1 =>
            <span class=K>IF</span> (i > 18) <span class=K>THEN</span>
               next_state <= s5;
            <span class=K>ELSIF</span> (i = 0 <span class=K>AND</span> a = 0) <span class=K>THEN</span>
               next_state <= s2;
            <span class=K>ELSIF</span> (i = 0 <span class=K>AND</span> a > 0) <span class=K>THEN</span>
               next_state <= s3;
            <span class=K>ELSE</span>
               next_state <= s1;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> s2 =>
            next_state <= s4;
         <span class=K>WHEN</span> s3 =>
            <span class=K>IF</span> (rx_rdy = '1') <span class=K>THEN</span>
               next_state <= s1;
            <span class=K>ELSE</span>
               next_state <= s3;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> s4 =>
            next_state <= s4;
         <span class=K>WHEN</span> s5 =>
            <span class=K>IF</span> (rx_rdy = '1') <span class=K>THEN</span>
               next_state <= s1;
            <span class=K>ELSE</span>
               next_state <= s5;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            next_state <= s0;
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> nextstate_proc;

   <span class=C>-----------------------------------------------------------------</span>
   output_proc : <span class=K>PROCESS</span> (
      a,
      current_state,
      gamma,
      i
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=C>-- Default Assignment</span>
      bit_out <= '0';
      lat <= '1';
      sb <= '0';
      transmit <= '0';

      <span class=C>-- Combined Actions</span>
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> s1 =>
            bit_out <= gamma(i);
            transmit <= '1';
            i <= i-1;
         <span class=K>WHEN</span> s2 =>
            lat <= '0';
         <span class=K>WHEN</span> s3 =>
            i <= 18;
            a <= a-1;
         <span class=K>WHEN</span> s4 =>
            sb <= '1';
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            <span class=K>NULL</span>;
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> output_proc;

<span class=K>END</span> fsm;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
