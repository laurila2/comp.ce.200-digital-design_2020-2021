-- VHDL Entity alien_game_lib.c5_t2_Write_Sequencer.symbol
--
-- Created:
--          by - viuhom.viuhom (linux-desktop5.tuni.fi)
--          at - 15:22:38 11/13/20
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c5_t2_Write_Sequencer IS
   PORT( 
      alien_defeated : IN     std_logic;
      clk            : IN     std_logic;
      rst_n          : IN     std_logic;
      write_ready    : IN     std_logic;
      enable         : OUT    std_logic;
      frame_done     : OUT    std_logic;
      gun_px_idx     : OUT    std_logic_vector (1 DOWNTO 0);
      module_select  : OUT    std_logic_vector (1 DOWNTO 0);
      write          : OUT    std_logic
   );

-- Declarations

END c5_t2_Write_Sequencer ;

--
-- VHDL Architecture alien_game_lib.c5_t2_Write_Sequencer.fsm
--
-- Created:
--          by - viuhom.viuhom (linux-desktop2.tuni.fi)
--          at - 12:11:45 11/24/20
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF c5_t2_Write_Sequencer IS

   TYPE STATE_TYPE IS (
      alienwrite1,
      alienwrite2,
      gunwrite1,
      gunwrite2,
      gunwrite3,
      gunwrite4,
      framedoneing,
      enabling,
      start,
      bulletwrite1,
      bulletwrite2,
      delay,
      aliendefeated,
      gunwrite5
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;
   -- pragma synthesis_off
   SIGNAL hds_next,hds_current,hds_clock: INTEGER;
   -- pragma synthesis_on

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(23 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(23 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_delay : std_logic;

   -- Declare any pre-registered internal signals
   SIGNAL enable_int : std_logic ;
   SIGNAL frame_done_int : std_logic ;
   SIGNAL gun_px_idx_int : std_logic_vector (1 DOWNTO 0);
   SIGNAL module_select_int : std_logic_vector (1 DOWNTO 0);
   SIGNAL write_int : std_logic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst_n
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst_n = '0') THEN
         current_state <= start;
         csm_timer <= (OTHERS => '0');
         -- Default Reset Values
         enable <= '0';
         frame_done <= '0';
         gun_px_idx <= "00";
         module_select <= "00";
         write <= '0';
         -- pragma synthesis_off
         hds_current <= 0;
         -- pragma synthesis_on
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
         csm_timer <= csm_next_timer;
         -- pragma synthesis_off
         hds_current <= hds_next;
         hds_clock <= -1;
         hds_clock <= 0;
         -- pragma synthesis_on
         -- Registered output assignments
         enable <= enable_int;
         frame_done <= frame_done_int;
         gun_px_idx <= gun_px_idx_int;
         module_select <= module_select_int;
         write <= write_int;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      alien_defeated,
      csm_timeout,
      current_state,
      write_ready
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_delay <= '0';
      CASE current_state IS
         WHEN alienwrite1 => 
            next_state <= alienwrite2;
            -- pragma synthesis_off
            hds_next <= 1;
            -- pragma synthesis_on
         WHEN alienwrite2 => 
            next_state <= bulletwrite1;
            -- pragma synthesis_off
            hds_next <= 2;
            -- pragma synthesis_on
         WHEN gunwrite1 => 
            next_state <= gunwrite2;
            -- pragma synthesis_off
            hds_next <= 3;
            -- pragma synthesis_on
         WHEN gunwrite2 => 
            next_state <= gunwrite3;
            -- pragma synthesis_off
            hds_next <= 4;
            -- pragma synthesis_on
         WHEN gunwrite3 => 
            next_state <= gunwrite4;
            -- pragma synthesis_off
            hds_next <= 5;
            -- pragma synthesis_on
         WHEN gunwrite4 => 
            next_state <= gunwrite5;
            -- pragma synthesis_off
            hds_next <= 6;
            -- pragma synthesis_on
         WHEN framedoneing => 
            next_state <= enabling;
            -- pragma synthesis_off
            hds_next <= 7;
            -- pragma synthesis_on
         WHEN enabling => 
            next_state <= delay;
            csm_to_delay <= '1';
            -- pragma synthesis_off
            hds_next <= 8;
            -- pragma synthesis_on
         WHEN start => 
            IF (write_ready = '0') THEN 
               next_state <= start;
               -- pragma synthesis_off
               hds_next <= 9;
               -- pragma synthesis_on
            ELSIF (write_ready = '1' AND
                   alien_defeated = '0') THEN 
               next_state <= alienwrite1;
               -- pragma synthesis_off
               hds_next <= 10;
               -- pragma synthesis_on
            ELSIF (write_ready = '1' AND
                   alien_defeated = '1') THEN 
               next_state <= aliendefeated;
               -- pragma synthesis_off
               hds_next <= 11;
               -- pragma synthesis_on
            ELSE
               next_state <= start;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN bulletwrite1 => 
            next_state <= bulletwrite2;
            -- pragma synthesis_off
            hds_next <= 12;
            -- pragma synthesis_on
         WHEN bulletwrite2 => 
            next_state <= gunwrite1;
            -- pragma synthesis_off
            hds_next <= 13;
            -- pragma synthesis_on
         WHEN delay => 
            IF (csm_timeout = '1') THEN 
               next_state <= start;
               -- pragma synthesis_off
               hds_next <= 14;
               -- pragma synthesis_on
            ELSE
               next_state <= delay;
               -- pragma synthesis_off
               hds_next <= 0;
               -- pragma synthesis_on
            END IF;
         WHEN aliendefeated => 
            next_state <= framedoneing;
            -- pragma synthesis_off
            hds_next <= 15;
            -- pragma synthesis_on
         WHEN gunwrite5 => 
            next_state <= framedoneing;
            -- pragma synthesis_off
            hds_next <= 16;
            -- pragma synthesis_on
         WHEN OTHERS =>
            next_state <= start;
            -- pragma synthesis_off
            hds_next <= 0;
            -- pragma synthesis_on
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      enable_int <= '0';
      frame_done_int <= '0';
      gun_px_idx_int <= "00";
      module_select_int <= "00";
      write_int <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN alienwrite1 => 
            write_int <= '1';
         WHEN alienwrite2 => 
            module_select_int <= "10";
         WHEN gunwrite1 => 
            module_select_int <= "01";
            write_int <= '1';
         WHEN gunwrite2 => 
            module_select_int <= "01";
            gun_px_idx_int <= "01";
            write_int <= '1';
         WHEN gunwrite3 => 
            module_select_int <= "01";
            gun_px_idx_int <= "10";
            write_int <= '1';
         WHEN gunwrite4 => 
            module_select_int <= "01";
            gun_px_idx_int <= "11";
            write_int <= '1';
         WHEN framedoneing => 
            frame_done_int <= '1';
         WHEN enabling => 
            enable_int <= '1';
         WHEN bulletwrite1 => 
            module_select_int <= "10";
            write_int <='1';
         WHEN bulletwrite2 => 
            module_select_int <= "01";
         WHEN aliendefeated => 
            module_select_int <= "11";
            write_int <= '1';
         WHEN gunwrite5 => 
            module_select_int <= "11";
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_delay
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_delay = '1') THEN
         csm_next_timer <= "100110001001011001111111"; -- no cycles(10000000)-1=9999999
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= unsigned(csm_timer) - '1';
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

END fsm;
